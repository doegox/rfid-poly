#!/usr/bin/python#pcsc_reader.pyfrom smartcard.System import *from smartcard.util import *from smartcard.CardRequest import CardRequestfrom smartcard.CardType import CardTypefrom smartcard.Exceptions import *from UnknownTag import UnknownTagfrom database import *from readerInfo import readerInfofrom debugging import Debugimport readerimport stringclass readerBasedCardType(CardType):         def __init__(self,focusReader):             self.focusReader = focusReader                      def matches(self,atr,reader):               if string.find(reader.name,self.focusReader) == 0:                   return Trueclass PCSC_Reader(reader.abstractReader):   def __init__(self,pcsc_reader,debug):       global DEBUG       DEBUG = debug       if self.__class__ == PCSC_Reader:           #----------------------------------------------------------------           if DEBUG:               Debug.printReadableInfo(pcsc_reader.name,' is initializing.')           #----------------------------------------------------------------       reader.abstractReader.__init__(self)       self.pcsc_reader = pcsc_reader       if self.__class__ == PCSC_Reader:           #-------------------------------------------------------           if DEBUG:               Debug.printReadableInfo(self.pcsc_reader.name,': is initialized.')           #-------------------------------------------------------   #tag status   hasAnOldTag = False   tagTouched = False   tagRemoved = False   atr = None   apduMode = False   def isTagConnected(self):         if self.tagTouched:               self.tagTouched = False               self.hasAnOldTag = True               return True         else:               return False   def isTagReleased(self):         if self.tagRemoved:               self.tagRemoved = False               self.hasAnOldTag = False               return True         else:               return False   def update(self):       if not self.apduMode:               state = self.pollForATag()               #update tagTouched,tagRemoved               if self.hasAnOldTag:                    if state:                           self.tagTouched = False                           self.tagRemoved = False                    else:                           self.tagTouched = False                           self.tagRemoved = True               else:                    if state:                           self.tagTouched = True                           self.tagRemoved = False                    else:                           self.tagTouched = False                           self.tagRemoved = False                              def getConnectedTag(self):       return  UnknownTag('Unknown',self.pcsc_reader.name)   def getConnectionToTag(self,reader):       return reader.createConnection()   def connect(self,connection):           connection.connect()   def doTransmition(self,connection,commandSet, protocol):       data,sw1,sw2 =  connection.transmit(commandSet,protocol)       return data,sw1,sw2   #universal polling function(can be overwritten for specified kind of readers.(eg.TouchaTag)   def pollForATag(self):       #-------------------------------------------------------       #if DEBUG:       #       Debug.printReadableInfo(self.pcsc_reader.name,': pollForATag function is going to start.')       #-------------------------------------------------------       cardtype =readerBasedCardType(self.pcsc_reader.name)       #-------------------------------------------------------       #if DEBUG:       #       Debug.printReadableInfo(self.pcsc_reader.name,': setup a card type collection recognized by PCSC and specified it to this reader.')       #-------------------------------------------------------           cardrequest = CardRequest(timeout = 0,cardType=cardtype)       #-------------------------------------------------------       #if DEBUG:       #       Debug.printReadableInfo(self.pcsc_reader.name,': created a cardrequest monitoring the card in the collection.')       #       Debug.printReadableInfo(self.pcsc_reader.name,': polling starts...')       #-------------------------------------------------------       try:           cardservice = cardrequest.waitforcard()           cardservice.connection.connect()           self.atr = cardservice.connection.getATR()           return True       except smartcard.Exceptions.CardRequestTimeoutException:           #------------------------------------------------------           #if DEBUG:           #    Debug.printReadableInfo("ExceptionFromPCSCReaderClass"," : The reason might be haven't find any card yet.")           #------------------------------------------------------           return False       except smartcard.Exceptions.NoCardException:           #------------------------------------------------------           #if DEBUG:           #    Debug.printReadableInfo("ExceptionFromPCSCReaderClass"," : The reason might be an OMNIKEY_CardMan 5321 is removed from PC.")           #------------------------------------------------------           return False       except smartcard.Exceptions.CardConnectionException:           #------------------------------------------------------           #if DEBUG:           #    Debug.printReadableInfo("ExceptionFromPCSCReaderClass"," : The reason might be an ARYGON Reader is removed from PC.")           #------------------------------------------------------           return False       except:           #------------------------------------------------------           #if DEBUG:           #    Debug.printReadableInfo("UnknownExceptionFromPCSCReaderClass",": doesn't know which leads to this problem, program stopped.")           #------------------------------------------------------           assert(False)   def disconnect(self,connection):       connection.disconnect()   def enterAPDU(self):       self.apduMode = True   def getATR(self):       return toHexString(self.atr)   def backToNormal(self):       self.apduMode = False         def getReaderInfo(self):       return readerInfo(self.pcsc_reader.name,UNKNOWN,UNKNOWN,None,None)