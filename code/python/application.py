#!/usr/bin/python#application.pyfrom ReaderTagManager import readerTagManagerfrom ui import userInterfacefrom reader import abstractReaderfrom dataHandler import *from database import *from RTMEvent import *from debugging import Debugimport pcsc_readerimport stringimport timeimport getoptimport systry:    import smartcardexcept:    print "Warning***The pyscard module can't be found."#-------------------------------------------------------debug = False#-------------------------------------------------------try:    opts,args = getopt.getopt(sys.argv[1:],'d')except getopt.GetoptError, err:    print str(err)    sys.exit(2)for o,a in opts:    if o == '-d':         debug = True    ui_ins = userInterface(debug)rtm = readerTagManager(debug)readerlist = []reader = Nonetag = NonenormalUserMode = TrueAPDUConsoleMode = FalseuserTypeExit = Falsewhile not userTypeExit:   if rtm.hasNewEvent():          rtmevent = rtm.getNewEvent()       readerlist = rtm.getReaderList()       tag = rtm.getTag()       if rtmevent.getEventType() == RTMET_READER_DETECTED:           ui_ins.printNewReaderInfo(rtmevent.getReaderAddData())       elif rtmevent.getEventType() == RTMET_READER_REMOVED:           ui_ins.printRemovedReaderInfo(rtmevent.getReaderRemoveData())       elif rtmevent.getEventType() == RTMET_TAG_DETECTED:           ui_ins.printNewTagInfo(rtmevent.getTagAddData())       elif rtmevent.getEventType() == RTMET_TAG_REMOVED:           ui_ins.printRemovedTagInfo()       else:           assert(False)   if ui_ins.hasNewEvent():       ui_ins.clearEventFlag()       cmd = ui_ins.getNewEvent().getCommand()       if normalUserMode:           if cmd == 'help':              ui_ins.printShowNormalUserOptions()           elif cmd == 'list':              ui_ins.printDeviceList(readerlist,tag)           elif cmd == 'readtag':              if tag == None:                 ui_ins.printNoTag()              else:                 if tag.getTagInfo().getTagType() == MIFARE_ULTRALIGHT:                       for one in readerlist:                          if one.getReaderInfo().getCurrentReaderName() == tag.getTagInfo().getCorresponseReader():                                    ui_ins.printMifareUltralight(one.readMifareUltralight())           elif string.find(cmd,'tag?') == 0:             if len(readerlist) == 0:                 ui_ins.printNoReader()             else:                 if tag!=None:                     if tag.getTagInfo().getTagType() != UNKNOWN:                         ui_ins.printTagIsRecognized(tag.getTagInfo().getTagType(),tag.getTagInfo().getCorresponseReader())                     else:                         ui_ins.printUnImplementedTag(tag.getTagInfo().getCorresponseReader())                 else:                            readerSupportedTagList = []                            for readerElement in readerlist:                                  if readerElement.getReaderInfo().getName() == UNKNOWN:                                           continue                                  for tagtype in readerElement.getReaderInfo().getSupportTagTypes():                                           readerSupportedTagList.append(tagtype)                            ui_ins.printSolutionForUnknownTag(findTagsNotInEnum(readerSupportedTagList))           elif string.find(cmd,'sel ') == 0:                if len(readerlist) < findNumberInString(cmd) or findNumberInString(cmd) <= 0:                   ui_ins.printOutOfRange()                else:                   reader = readerlist[findNumberInString(cmd)-1]                   ui_ins.printSelectReaderInfo(readerlist[findNumberInString(cmd)-1])           elif string.find(cmd,'tool') == 0:                if tag == None:                    ui_ins.printNoTag()                else:                    ui_ins.printTagExternalTools(tag.getTagInfo().getTagType(),tag.getTagInfo().getSupportExternalTools())           elif cmd == 'exit':                   userTypeExit = True           elif cmd == '':                pass           elif cmd == 'apdu':              if len(readerlist) != 0:                  if reader == None:                      ui_ins.printNeedToSelectReader()                  else:                      ui_ins.printModeSwitchInfo(normalUserMode)                      reader.enterAPDU()                      normalUserMode = False                      APDUConsoleMode = True              else:                 ui_ins.printNoReader()           else:                ui_ins.printUnknownCommand()       elif APDUConsoleMode:           if cmd == 'normal':              ui_ins.printModeSwitchInfo(normalUserMode)              reader.backToNormal()              normalUserMode = True              APDUConsoleMode = False           elif cmd == 'help':              ui_ins.printShowExpertUserOptions()           elif cmd == 'exit':              userTypeExit = True           elif cmd == '':              pass           else:                 if stringToArray(cmd) != None:                    #-------------------------------------------------------                    if debug:                        Debug.APDUDecoding(stringToArray(cmd))                    #-------------------------------------------------------                    result,sw1,sw2 = reader.transmitAPDU(stringToArray(cmd))                    ui_ins.printReturnedAPDU(result,sw1,sw2)                 else:                    ui_ins.printUnrecognizedAPDUCommand()       else:           #should never reach here           assert(False)       ui_ins.setEventFlag()         