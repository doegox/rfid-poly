#!/usr/bin/python#pcsc_reader.pyfrom smartcard.System import *from smartcard.util import *from smartcard.CardRequest import CardRequestfrom smartcard.CardType import AnyCardType,ATRCardType,CardTypeimport smartcardfrom readerInfo import readerInfoimport readerfrom UI import userInterfaceimport stringclass readerBasedCardType(CardType):         def matches(self,atr,reader):               if string.find(reader.name,'OMNIKEY') == 0:                   return Trueclass PCSC_Reader(reader.abstractReader):   def __init__(self,pcsc_reader):       reader.abstractReader.__init__(self)       self.pcsc_reader = pcsc_reader       self.__configure()   protocol = smartcard.scard.SCARD_PROTOCOL_T0   def isTagConnected(self):       raise NotImplementedError,"Cannot call abstract method"   def isTagReleased(self):       raise NotImplementedError,"Cannot call abstract method"   def getReaderInfo(self):       raise NotImplementedError,"Cannot call abstract method"   def getConnectedTag(self):       raise NotImplementedError,"Cannot call abstract method"   def __configure(self):       if string.find(self.pcsc_reader.name,'    CCID USB Reader 0') == 0:           self.protocol = smartcard.scard.SCARD_PROTOCOL_T0       elif string.find(self.pcsc_reader.name,'OMNIKEY') == 0:           self.protocol = smartcard.scard.SCARD_PROTOCOL_T1       else:           assert(False)   def getConnectionToTag(self,reader):       return reader.createConnection()   def connect(self,connection):           connection.connect()   def doTransmition(self,connection,commandSet):      try:           data,sw1,sw2 =  connection.transmit(commandSet,self.protocol)           return data,sw1,sw2      except:           pass   #universal polling function(can be overwritten for specified kind of readers.(eg.TouchaTag)   def pollForATag(self):       cardtype =readerBasedCardType()       cardrequest = CardRequest(timeout = 0,cardType=cardtype)       try:           cardservice = cardrequest.waitforcard()           cardservice.connection.connect()           if cardservice.connection.getReader()!=self.pcsc_reader.name:              return False           return True       except:           return False   def disconnect(self,connection):       connection.disconnect()   def enterAPDU(self):       pass   def backToNormal(self):       pass         def getReaderInfo(self):       return readerInfo(self.pcsc_reader.name,'Unknown','Unknown',None,None)