#!/usr/bin/python#ACS_ACU122.pyimport pcsc_readerimport stringimport thread,threadingfrom readerInfo import readerInfofrom Mifare_Ultralight import Mifare_Ultralightfrom Mifare_1K import Mifare_1Kfrom Mifare_4K import Mifare_4Kfrom Mifare_Desfire import Mifare_Desfirefrom database import *from debugging import Debug#libraries for testing reasonfrom smartcard.System import *from smartcard.util import *from smartcard.Exceptions import *import timeclass ACS_ACU122(pcsc_reader.PCSC_Reader):     def __init__(self,reader,debug):         global DEBUG         DEBUG = debug         #----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printReadableInfo(self.readername,"is Initializing.")         #----------------------------------------------------------------------------------------------------------------                       pcsc_reader.PCSC_Reader.__init__(self,reader,DEBUG)         self.reader = reader         self.readerInfo = readerInfo(reader.name,self.readername,self.hardware,self.supportProtocols,self.supportTagTypes)         self.connection = self.getConnectionToTag(reader)         self.connect(self.connection)         self.protocol = smartcard.scard.SCARD_PROTOCOL_T0         #-----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printReadableInfo(self.readername,":The transmition protocol is set to T0.")         #-----------------------------------------------------------------------------------------------------------------         #set retry time to 1         self.doTransmition(self.connection,self.commandSet['setRetryTime'],self.protocol)         #-----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printReadableInfo(self.readername,":The retry time is set to 1 instead of waiting for a tag forever.")         #-----------------------------------------------------------------------------------------------------------------         #-----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printReadableInfo(self.readername,"is initialized.")         #-----------------------------------------------------------------------------------------------------------------     #parameters of touchatag     readername = TOUCHATAG     hardware = PN531     supportProtocols = (ISO14443,ISO18092)     supportTagTypes = (MIFARE_ULTRALIGHT,MIFARE_1K,MIFARE_4K,MIFARE_DESFIRE)     #command sets     commandSet = {'setRetryTime':[0xFF,0x00,0x00,0x00,0x06,0xD4,0x32,0x05,0x00,0x00,0x00],                   'pollingCommand':[0xFF,0x00,0x00,0x00,0x04,0xD4,0x4A,0x01,0x00],                   'getResponse':[0xFF,0xC0,0x00,0x00],                   'readMifareUltralight':[0xFF,0x00,0x00,0x00,0x05,0xD4,0x40,0x01,0x30]}     #STATUS BYTE 2     SW2 = {'no tag found':'0x5',            'a mifare classic found':'0xe',            'a mifare ultralight found':'0x11',            'a mifare desfire found':'0x17'}     #runtime variable     tagType = None     tagUID = None     tagConnect = False     tagRelease = False     hasTagConnected = False     apduMode = False     def isTagConnected(self):           if self.tagConnect:                 self.tagConnect = False                 self.hasTagConnected = True                 return True           else:                 return False     def isTagReleased(self):           if self.tagRelease:                 self.tagRelease = False                 self.hasTagConnected = False                 return True           else:                 return False     def update(self):         self.pollForATag()      def pollForATag(self):            try:                 if not self.apduMode:                   self.disconnect(self.connection)                   self.connect(self.connection)                   #re-connect is needed for touchatag                   data,trans1,trans2 = self.doTransmition(self.connection,self.commandSet['pollingCommand'],self.protocol)                   self.commandSet['getResponse'].append(trans2)                   result,get1,get2 = self.doTransmition(self.connection,self.commandSet['getResponse'],self.protocol)                   self.commandSet['getResponse'].pop()                   #operate the runtime variables according to the reponse of the direct transmit and get response data                   if hex(trans2) == self.SW2['no tag found']:                      self.tagConnect = False                      if self.tagType == None:                         self.tagRelease = False                      else:                         self.tagRelease = True                         self.tagType = None                         self.tagUID = None                   elif hex(trans2) == self.SW2['a mifare classic found']:                         self.tagRelease = False                         if self.tagType == None:                            self.tagConnect = True                            self.tagUID = result[8:12]                            self.tagType = result[6]                         else:                            self.tagConnect = False                   elif hex(trans2) == self.SW2['a mifare ultralight found']:                         self.tagRelease = False                         if self.tagType == None:                            self.tagConnect = True                            self.tagUID = result[8:15]                            self.tagType = result[6]                         else:                            self.tagConnect = False                   elif hex(trans2) == self.SW2['a mifare desfire found']:                         self.tagRelease = False                         if self.tagType == None:                              self.tagConnect = True                              self.tagUID = result[8:15]                              self.tagType = result[6]                         else:                              self.tagConnect = False                   else:                         print "not sure what happened to the reader."                         assert(False)            except smartcard.Exceptions.CardConnectionException:                   #Reader disconnected                   #--------------------------------------------------------                   if DEBUG:                        Debug.printReadableInfo('ExceptionFromTOUCHATAGinstance',': The reason might be the reader is disconnected.')                   #--------------------------------------------------------                   pass            except:                   #don't know what happened, quit the program                   #--------------------------------------------------------                   if DEBUG:                        Debug.printReadableInfo('UnknownExceptionFromTOUCHATAGinstance',": Doesn't know which leads to this exception, program stopped.")                   #--------------------------------------------------------                   assert(False)     def getConnectedTag(self):         if hex(self.tagType) == SAK[MIFARE_ULTRALIGHT]:              return Mifare_Ultralight(toHexString(self.tagUID),self.getATR(),self.reader.name)         elif hex(self.tagType) == SAK[MIFARE_1K]:              return Mifare_1K(toHexString(self.tagUID),self.getATR(),self.reader.name)         elif hex(self.tagType) == SAK[MIFARE_4K]:              return Mifare_4K(toHexString(self.tagUID),self.getATR(),self.reader.name)         elif hex(self.tagType) == SAK[MIFARE_DESFIRE]:              return Mifare_Desfire(toHexString(self.tagUID),self.getATR(),self.reader.name)         else:              assert(False)     def getReaderInfo(self):         return self.readerInfo     def transmitAPDU(self,apdu):         #-----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printTransmitInfo(toHexString(apdu))         #-----------------------------------------------------------------------------------------------------------------         data,sw1,sw2 = self.doTransmition(self.connection,apdu,self.protocol)         if sw2 == 0xff:              return data,sw1,sw2         if len(apdu) == 5:              return toHexString(data),sw1,sw2         #-----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printReceiveInfo(toHexString(data))              Debug.printStatusByte(sw1,sw2)         #-----------------------------------------------------------------------------------------------------------------         self.commandSet['getResponse'].append(sw2)         #-----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printTransmitInfo(toHexString(self.commandSet['getResponse']))         #-----------------------------------------------------------------------------------------------------------------         result,get1,get2 = self.doTransmition(self.connection,self.commandSet['getResponse'],self.protocol)         self.commandSet['getResponse'].pop()         #-----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printReceiveInfo(toHexString(result))              Debug.printStatusByte(get1,get2)         #-----------------------------------------------------------------------------------------------------------------         return toHexString(result),get1,get2     def readMifareUltralight(self):           tagData = []           self.apduMode = True           #----------------------------------------------------------------------------------------------------------------           if DEBUG:                Debug.printReadableInfo(self.readername," stops polling for tags.")           #----------------------------------------------------------------------------------------------------------------           self.disconnect(self.connection)           self.connect(self.connection)           data,sw1,sw2 = self.doTransmition(self.connection,self.commandSet['pollingCommand'],self.protocol)           for i in range(16):                self.commandSet['readMifareUltralight'].append(i)                data,sw1,sw2 = self.doTransmition(self.connection,self.commandSet['readMifareUltralight'],self.protocol)                self.commandSet['readMifareUltralight'].pop()                self.commandSet['getResponse'].append(sw2)                result,sw1,sw2 = self.doTransmition(self.connection,self.commandSet['getResponse'],self.protocol)                self.commandSet['getResponse'].pop()                tagData.append(result[3:7])           self.apduMode = False           #----------------------------------------------------------------------------------------------------------------           if DEBUG:                Debug.printReadableInfo(self.readername," continues polling for tags.")           #----------------------------------------------------------------------------------------------------------------           self.doTransmition(self.connection,self.commandSet['pollingCommand'],self.protocol)           return tagData          def enterAPDU(self):          self.apduMode = True          self.disconnect(self.connection)          self.connect(self.connection)          #----------------------------------------------------------------------------------------------------------------          if DEBUG:               Debug.printReadableInfo(self.readername," stops polling for tags.")          #----------------------------------------------------------------------------------------------------------------     def backToNormal(self):         self.apduMode = False         #----------------------------------------------------------------------------------------------------------------         if DEBUG:              Debug.printReadableInfo(self.readername," continues polling for tags.")         #----------------------------------------------------------------------------------------------------------------     def getATR(self):          return 'Unknown'     @staticmethod     def isThisType(sysName,readername):          if sysName == 'nt':               if string.find(readername,'    CCID USB Reader') == 0:                    return True               else:                    return False          elif sysName == 'posix':               if string.find(readername,'ACS ACR 38U-CCID') == 0:                    return True               else:                    return False          else:               raise NotImplementedError,"Sorry, this operating system is not supported by our software."     def __del__(self):         pass#self-testingif __name__ == '__main__':       acs = ACS_ACU122(readers()[0])       while True:                 acs.pollForATag()                 if acs.isTagConnected():                     print acs.getConnectedTag().getTagInfo().getTagUID()                 if acs.isTagReleased():                     print "tag released!"