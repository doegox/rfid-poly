#!/usr/bin/python#pcsc_reader.pyfrom smartcard.System import *from smartcard.util import *from smartcard.CardRequest import CardRequestfrom smartcard.CardType import AnyCardTypefrom readerInfo import readerInfoimport readerclass PCSC_Reader(reader.abstractReader):   def __init__(self,pcsc_reader):       reader.abstractReader.__init__(self)       self.pcsc_reader = pcsc_reader   def isTagConnected(self):       raise NotImplementedError,"Cannot call abstract method"   def isTagReleased(self):       raise NotImplementedError,"Cannot call abstract method"   def getReaderInfo(self):       raise NotImplementedError,"Cannot call abstract method"   def getConnectedTag(self):       raise NotImplementedError,"Cannot call abstract method"   def getConnectionToTag(self,reader):       return reader.createConnection()   def connect(self,connection):       try:           connection.connect()           return True       except:           return False   def doTransmition(self,connection,commandSet):       try:           return connection.transmit(commandSet)       except:           pass   #universal polling function(can be overwritten for specified kind of readers.(eg.TouchaTag)   def pollForATag(self):       cardtype = AnyCardType()       cardrequest = CardRequest(timeout = 0,cardType=cardtype)       try:           cardservice = cardrequest.waitforcard()           cardservice.connection.connect()           if cardservice.connection.getReader()!=self.pcsc_reader.name:              return False           return True       except:           return False   def disconnect(self,connection):       connection.disconnect()   def getReaderInfo(self):       return readerInfo(self.pcsc_reader.name,'Unknown','Unknown',None,None)